package test;

import java.util.Properties;

import org.apache.kafka.clients.producer.Callback;
import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.clients.producer.RecordMetadata;
import org.apache.kafka.common.serialization.StringSerializer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Producer {
    public static void main(String[] args) throws InterruptedException {

        final Logger logger = LoggerFactory.getLogger(Producer.class);

        String bootstrapServers = "127.0.0.1:9092";
        Long currEpoch = System.currentTimeMillis() / 1000;
        Long maxRunTimeSeconds = 6000L;
        Integer timeBetweenMessages = 2000;

        Properties properties = new Properties();
        properties.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);
        properties.setProperty(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());
        properties.setProperty(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());

        KafkaProducer<String, String> producer = new KafkaProducer<String, String>(properties);

        while (System.currentTimeMillis() / 1000 - currEpoch < maxRunTimeSeconds) {
            ProducerRecord<String, String> record = new ProducerRecord<String, String>("os_use",
                    String.valueOf(Runtime.getRuntime().freeMemory()));

            Thread.sleep(timeBetweenMessages);

            producer.send(record, new Callback() {
                public void onCompletion(RecordMetadata recordMetadata, Exception e) {
                    if (e == null) {
                        logger.info("Message sent successfully at " + System.currentTimeMillis() / 1000);
                        logger.info("Process has been running for " + System.currentTimeMillis() / 1000 - currEpoch + " seconds")
                    } else {
                        logger.error("Producer error", e);
                    }
                }
            });
        }

        producer.flush();
        producer.close();
    }
}